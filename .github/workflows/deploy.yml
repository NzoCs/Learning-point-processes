name: Build, Test and Deploy

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'  # D√©clenche sur les tags de version (v1.0.0, v1.1.0, etc.)
  workflow_dispatch:  # Permet d√©clenchement manuel

env:
  PYTHON_VERSION: "3.12"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
          
      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          
      - name: Install dependencies
        run: poetry install
        
      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=new_ltpp --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        run: |
          pip install poetry
          
      - name: Build package
        run: poetry build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    env:
      POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pip install poetry

      - name: Build with Poetry
        run: poetry build

      - name: Publish to PyPI
        run: poetry publish

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            dist/*.whl
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # N√©cessaire pour gitiles
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry and dependencies
        run: |
          pip install poetry
          poetry install
          
      - name: Build documentation
        run: |
          cd docs
          poetry run sphinx-build -b html . _build/html
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          cname: your-domain.com  # Optionnel: remplacez par votre domaine

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-pypi, create-release, deploy-docs]
    if: always() && (github.event_name == 'release' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Notify success
        if: needs.deploy-pypi.result == 'success' && needs.create-release.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "‚úÖ PyPI: Published"
          echo "‚úÖ GitHub Release: Created"
          echo "‚úÖ Documentation: Updated"
          
      - name: Notify failure
        if: needs.deploy-pypi.result == 'failure' || needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for details."
          exit 1