# Makefile pour EasyTPP
# Automatise l'installation et les t√¢ches communes avec pyproject.toml

.PHONY: help install install-dev install-all test clean setup docs format lint check

# Variables
PYTHON = python
PIP = pip

# Couleurs pour l'affichage
BLUE = \033[1;34m
GREEN = \033[1;32m
YELLOW = \033[1;33m
RED = \033[1;31m
NC = \033[0m # No Color

help: ## Affiche cette aide
	@echo "$(BLUE)EasyTPP - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-15s$(NC) %s\n", $$1, $$2}'

install: ## Installation de base (d√©pendances principales uniquement)
	@echo "$(BLUE)üîß Installation de base d'EasyTPP...$(NC)"
	@$(PIP) install -e .
	@echo "$(GREEN)‚úÖ Installation de base termin√©e!$(NC)"

install-dev: ## Installation avec outils de d√©veloppement
	@echo "$(BLUE)üõ†Ô∏è Installation avec outils de d√©veloppement...$(NC)"
	@$(PIP) install -e ".[dev]"
	@echo "$(GREEN)‚úÖ Installation dev termin√©e!$(NC)"

install-cli: ## Installation avec outils CLI
	@echo "$(BLUE)üìü Installation avec outils CLI...$(NC)"
	@$(PIP) install -e ".[cli]"
	@echo "$(GREEN)‚úÖ Installation CLI termin√©e!$(NC)"

install-docs: ## Installation avec outils de documentation
	@echo "$(BLUE)üìö Installation avec outils de documentation...$(NC)"
	@$(PIP) install -e ".[docs]"
	@echo "$(GREEN)‚úÖ Installation docs termin√©e!$(NC)"

install-all: ## Installation compl√®te (toutes les d√©pendances)
	@echo "$(BLUE)ÔøΩ Installation compl√®te d'EasyTPP...$(NC)"
	@$(PIP) install -e ".[all]"
	@echo "$(GREEN)‚úÖ Installation compl√®te termin√©e!$(NC)"

setup-dev: ## Configuration des outils de d√©veloppement
	@echo "$(BLUE)‚öôÔ∏è Configuration des outils de d√©veloppement...$(NC)"
	@pre-commit install
	@echo "$(GREEN)‚úÖ Pre-commit hooks install√©s!$(NC)"

check: ## V√©rification de l'installation
	@echo "$(BLUE)ÔøΩ V√©rification de l'installation...$(NC)"
	@$(PYTHON) check_installation.py

test: ## Ex√©cute les tests
	@echo "$(BLUE)üß™ Ex√©cution des tests...$(NC)"
	@pytest

test-cov: ## Ex√©cute les tests avec couverture
	@echo "$(BLUE)üìä Tests avec couverture...$(NC)"
	@pytest --cov=easy_tpp --cov-report=html

format: ## Formate le code avec Black
	@echo "$(BLUE)üé® Formatage du code...$(NC)"
	@black .
	@echo "$(GREEN)‚úÖ Code format√©!$(NC)"

format-check: ## V√©rifie le formatage sans modifier
	@echo "$(BLUE)üîç V√©rification du formatage...$(NC)"
	@black --check .

isort: ## Organise les imports
	@echo "$(BLUE)üìã Organisation des imports...$(NC)"
	@isort .
	@echo "$(GREEN)‚úÖ Imports organis√©s!$(NC)"

lint: ## V√©rifie le code avec flake8
	@echo "$(BLUE)üîç V√©rification du code avec flake8...$(NC)"
	@flake8

type-check: ## V√©rifie les types avec mypy
	@echo "$(BLUE)ÔøΩ V√©rification des types...$(NC)"
	@mypy easy_tpp

clean: ## Nettoie les fichiers temporaires
	@echo "$(BLUE)üßπ Nettoyage...$(NC)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} +
	@find . -type f -name "*.log" -delete
	@rm -rf .pytest_cache
	@rm -rf htmlcov
	@rm -rf .coverage
	@rm -rf .mypy_cache
	@rm -rf build
	@rm -rf dist
	@rm -rf *.egg-info
	@echo "$(GREEN)‚úÖ Nettoyage termin√©!$(NC)"

docs: ## G√©n√®re la documentation
	@echo "$(BLUE)üìö G√©n√©ration de la documentation...$(NC)"
	@cd docs && make html
	@echo "$(GREEN)‚úÖ Documentation g√©n√©r√©e!$(NC)"

docs-serve: ## Serve la documentation localement
	@echo "$(BLUE)üåê Serveur de documentation...$(NC)"
	@cd docs && sphinx-autobuild . _build/html

check-deps: ## V√©rifie les d√©pendances principales
	@echo "$(BLUE)üì¶ V√©rification des d√©pendances...$(NC)"
	@$(PYTHON) -c "import torch; print('‚úÖ PyTorch:', torch.__version__)" || echo "‚ùå PyTorch non install√©"
	@$(PYTHON) -c "import pytorch_lightning; print('‚úÖ PyTorch Lightning')" || echo "‚ùå PyTorch Lightning non install√©"
	@$(PYTHON) -c "import numpy; print('‚úÖ NumPy')" || echo "‚ùå NumPy non install√©"
	@$(PYTHON) -c "import pandas; print('‚úÖ Pandas')" || echo "‚ùå Pandas non install√©"
	@$(PYTHON) -c "import easy_tpp; print('‚úÖ EasyTPP')" || echo "‚ùå EasyTPP non install√©"

build: ## Construit le package
	@echo "$(BLUE)ÔøΩ Construction du package...$(NC)"
	@$(PYTHON) -m build
	@echo "$(GREEN)‚úÖ Package construit!$(NC)"

quality: ## Ex√©cute tous les contr√¥les qualit√©
	@echo "$(BLUE)ÔøΩ Contr√¥les qualit√©...$(NC)"
	@make format-check
	@make lint
	@make type-check
	@make test
	@echo "$(GREEN)‚úÖ Tous les contr√¥les qualit√© pass√©s!$(NC)"

pre-commit: ## Ex√©cute les hooks pre-commit sur tous les fichiers
	@echo "$(BLUE)üîÑ Ex√©cution des hooks pre-commit...$(NC)"
	@pre-commit run --all-files

quick-start: ## Guide de d√©marrage rapide
	@echo "$(BLUE)üöÄ Guide de D√©marrage Rapide EasyTPP$(NC)"
	@echo ""
	@echo "$(YELLOW)√âtape 1:$(NC) Installation compl√®te"
	@echo "  make install-all"
	@echo ""
	@echo "$(YELLOW)√âtape 2:$(NC) Configuration d√©veloppement"
	@echo "  make setup-dev"
	@echo ""
	@echo "$(YELLOW)√âtape 3:$(NC) V√©rification"
	@echo "  make check"
	@echo ""
	@echo "$(YELLOW)√âtape 4:$(NC) Tests"
	@echo "  make test"
	@echo ""
	@echo "$(GREEN)üìö Documentation: README.md et SETUP_GUIDE.md$(NC)"

demo: ## D√©monstration rapide
	@echo "$(BLUE)üé¨ D√©monstration EasyTPP$(NC)"
	@echo ""
	@echo "$(YELLOW)1. V√©rification de l'installation:$(NC)"
	@make check
	@echo ""
	@echo "$(YELLOW)2. Test d'import:$(NC)"
	@$(PYTHON) -c "import easy_tpp; print('‚úÖ EasyTPP import√© avec succ√®s!')"
	@echo ""
	@echo "$(GREEN)‚úÖ D√©monstration termin√©e!$(NC)"

# Targets par d√©faut
all: install-all setup-dev check test

.DEFAULT_GOAL := help
