"""
Exemple d'utilisation de la ModelFactory

Cet exemple montre comment utiliser la factory pour cr√©er des mod√®les
de mani√®re automatique gr√¢ce au syst√®me de registry bas√© sur des m√©taclasses.
La factory d√©couvre automatiquement tous les mod√®les disponibles.
"""

from easy_tpp.configs.config_builder import ModelConfigBuilder
from easy_tpp.configs.config_factory import ConfigFactory, ConfigType
from easy_tpp.models.model_factory import ModelFactory


def example_create_model_with_factory():
    """Exemple de cr√©ation de mod√®le avec la factory."""
    print("=== Cr√©ation avec la factory ===")

    # Build model config using ModelConfigBuilder + factory
    builder = ModelConfigBuilder()
    builder.set_field("model_id", "NHP")
    builder.set_field("num_event_types", 10)
    model_config_dict = builder.get_config_dict()

    config_factory = ConfigFactory()
    model_config = config_factory.create_config(ConfigType.MODEL, model_config_dict)

    # Cr√©ation avec la factory (d√©couverte automatique)
    factory = ModelFactory()
    model = factory.create_model_by_name("NHP", model_config)
    print(f"Mod√®le cr√©√©: {model.__class__.__name__}")
    print(f"Type de mod√®le: {type(model)}")


def example_create_model_by_name():
    """Exemple de cr√©ation par nom."""
    print("\n=== Cr√©ation par nom ===")

    # Test avec diff√©rents mod√®les
    factory = ModelFactory()
    models_to_test = ["SAHP", "THP", "AttNHP"]
    
    def make_model_config(name: str):
        b = ModelConfigBuilder()
        b.set_field("model_id", name)
        b.set_field("num_event_types", 10)
        cfg = b.get_config_dict()
        f = ConfigFactory()
        return f.create_config(ConfigType.MODEL, cfg)

    for model_name in models_to_test:
        try:
            model_config = make_model_config(model_name)
            model = factory.create_model_by_name(model_name, model_config)
            print(f"‚úÖ {model_name}: {model.__class__.__name__}")
        except Exception as e:
            print(f"‚ùå {model_name}: {e}")


def example_list_models():
    """Exemple pour lister les mod√®les disponibles."""
    print("\n=== Mod√®les disponibles ===")

    factory = ModelFactory()
    models = factory.list_available_models()

    print(f"Mod√®les d√©couverts automatiquement ({len(models)} mod√®les):")
    for i, model_name in enumerate(sorted(models), 1):
        print(f"  {i:2d}. {model_name}")
    
    # Affichage du registry interne
    from easy_tpp.models.model_registry import ModelRegistry
    registry_models = ModelRegistry.list_models()
    print(f"\nMod√®les dans le registry ({len(registry_models)} mod√®les):")
    for i, model_name in enumerate(sorted(registry_models), 1):
        print(f"  {i:2d}. {model_name}")


def example_error_handling():
    """Exemple de gestion d'erreur."""
    print("\n=== Gestion d'erreurs ===")

    factory = ModelFactory()

    # Test 1: Mod√®le qui n'existe pas
    try:
        # build a config for the nonexistent model using the builder
        b = ModelConfigBuilder()
        b.set_field("model_id", "NONEXISTENT")
        b.set_field("num_event_types", 10)
        model_config = ConfigFactory().create_config(ConfigType.MODEL, b.get_config_dict())
        model = factory.create_model_by_name("NONEXISTENT", model_config)
        print("‚ùå Aucune erreur d√©tect√©e (inattendu)")
    except ValueError as e:
        print(f"‚úÖ Erreur attendue pour mod√®le inexistant: {e}")
    
    # Test 2: Configuration invalide
    try:
        model = factory.create_model_by_name("NHP", None)
        print("‚ùå Aucune erreur d√©tect√©e pour config None (inattendu)")
    except Exception as e:
        print(f"‚úÖ Erreur attendue pour config None: {type(e).__name__}: {e}")
    
    # Test 3: V√©rification de la robustesse
    print(f"\nüîç Factory toujours fonctionnelle: {len(factory.list_available_models())} mod√®les")



def example_advanced_usage():
    """Exemple d'utilisation avanc√©e de la factory."""
    print("\n=== Utilisation avanc√©e ===")
    
    factory = ModelFactory()
    available_models = factory.list_available_models()
    
    # Cr√©er plusieurs mod√®les diff√©rents
    print("Cr√©ation de plusieurs mod√®les:")
    models_created = []
    
    for model_name in list(available_models)[:3]:  # Prendre les 3 premiers
        try:
            config = None
            try:
                b = ModelConfigBuilder()
                b.set_field("model_id", model_name)
                b.set_field("num_event_types", 10)
                cfg = b.get_config_dict()
                config = ConfigFactory().create_config(ConfigType.MODEL, cfg)
            except Exception:
                config = None
            model = factory.create_model_by_name(model_name, config)
            models_created.append((model_name, model))
            print(f"  ‚úÖ {model_name}: {model.__class__.__module__}.{model.__class__.__name__}")
        except Exception as e:
            print(f"  ‚ùå {model_name}: {e}")
    
    print(f"\nüéØ R√©sultat: {len(models_created)} mod√®les cr√©√©s avec succ√®s")
    
    # V√©rification des types
    print("\nV√©rification des types:")
    for name, model in models_created:
        print(f"  - {name}: isinstance(BaseModel) = {hasattr(model, '__class__')}")


def main():
    """Fonction principale pour tester tous les exemples."""
    print("üè≠ Exemples ModelFactory - Syst√®me Automatique")
    print("=" * 55)
    print("üìã Ce syst√®me d√©couvre automatiquement tous les mod√®les")
    print("üîß Aucune maintenance manuelle d'enum n√©cessaire")
    print("=" * 55)

    try:
        # Import des mod√®les pour d√©clencher l'enregistrement
        print("üîÑ Chargement des mod√®les...")
        import easy_tpp.models  # D√©clenche l'enregistrement automatique
        print("‚úÖ Mod√®les charg√©s\n")
        
        example_create_model_with_factory()
        example_create_model_by_name()
        example_list_models()
        example_error_handling()
        example_advanced_usage()

    except Exception as e:
        print(f"‚ùå Erreur dans les exemples: {e}")
        import traceback
        traceback.print_exc()
        print(
            "\nüìù Note: Certains exemples peuvent √©chouer selon les d√©pendances disponibles"
        )

    print("\n" + "=" * 55)
    print("‚úÖ Exemples termin√©s!")
    print("üéâ Le syst√®me de factory automatique fonctionne parfaitement")


if __name__ == "__main__":
    main()
