#!/usr/bin/env python3
"""
Guide de D√©marrage Rapide - EasyTPP CLI

Ce script interactif guide l'utilisateur dans la configuration
et l'utilisation initiale de l'outil EasyTPP CLI.
"""

import os
import sys
import subprocess
from pathlib import Path

def print_header():
    """Affiche l'en-t√™te du guide"""
    print("=" * 60)
    print("    üöÄ GUIDE DE D√âMARRAGE RAPIDE - EasyTPP CLI")
    print("=" * 60)
    print()

def print_step(step_num, title):
    """Affiche un titre d'√©tape"""
    print(f"\nüìã √âTAPE {step_num}: {title}")
    print("-" * 40)

def run_command(command, description=""):
    """Ex√©cute une commande avec description"""
    if description:
        print(f"üîß {description}")
    print(f"   Commande: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True)
        print("   ‚úÖ Succ√®s!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def check_python():
    """V√©rifie la version de Python"""
    print("üêç V√©rification de Python...")
    try:
        import sys
        version = sys.version_info
        print(f"   Version Python: {version.major}.{version.minor}.{version.micro}")
        
        if version.major >= 3 and version.minor >= 8:
            print("   ‚úÖ Version Python compatible")
            return True
        else:
            print("   ‚ùå Python 3.8+ requis")
            return False
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def check_files():
    """V√©rifie que les fichiers n√©cessaires existent"""
    print("üìÅ V√©rification des fichiers...")
    
    required_files = [
        "easytpp_cli.py",
        "setup_cli.py",
        "requirements-cli.txt"
    ]
    
    missing_files = []
    for file in required_files:
        if Path(file).exists():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} manquant")
            missing_files.append(file)
    
    return len(missing_files) == 0

def installation_guide():
    """Guide d'installation"""
    print_step(1, "INSTALLATION")
    
    print("Choisissez votre m√©thode d'installation:")
    print("1. Installation automatique (recommand√©e)")
    print("2. Installation manuelle")
    print("3. Passer (d√©j√† install√©)")
    
    choice = input("\nVotre choix (1-3): ").strip()
    
    if choice == "1":
        print("\nüîÑ Installation automatique...")
        success = run_command("python setup_cli.py", "Ex√©cution du script d'installation")
        if not success:
            print("‚ö†Ô∏è L'installation automatique a √©chou√©. Essayez l'installation manuelle.")
            return False
            
    elif choice == "2":
        print("\nüîß Installation manuelle...")
        print("Ex√©cutez les commandes suivantes:")
        print("1. pip install -r requirements.txt")
        print("2. pip install -r requirements-cli.txt")
        print("3. python setup_cli.py")
        
        input("\nAppuyez sur Entr√©e quand vous avez termin√©...")
        
    elif choice == "3":
        print("‚úÖ Installation ignor√©e")
    else:
        print("‚ùå Choix invalide")
        return False
    
    return True

def basic_test():
    """Test de base du CLI"""
    print_step(2, "TEST DE BASE")
    
    print("üß™ Test des commandes de base...")
    
    tests = [
        ("python easytpp_cli.py --version", "Test de version"),
        ("python easytpp_cli.py --help", "Test d'aide"),
        ("python easytpp_cli.py info", "Test d'informations syst√®me")
    ]
    
    all_passed = True
    for command, description in tests:
        success = run_command(command, description)
        if not success:
            all_passed = False
    
    if all_passed:
        print("\n‚úÖ Tous les tests de base sont pass√©s!")
    else:
        print("\n‚ùå Certains tests ont √©chou√©. V√©rifiez l'installation.")
    
    return all_passed

def configuration_guide():
    """Guide de configuration"""
    print_step(3, "CONFIGURATION")
    
    print("üìÅ V√©rification des r√©pertoires...")
    directories = ["configs", "outputs", "logs", "checkpoints"]
    
    for directory in directories:
        if Path(directory).exists():
            print(f"   ‚úÖ {directory}/")
        else:
            print(f"   üìÅ Cr√©ation de {directory}/")
            Path(directory).mkdir(exist_ok=True)
    
    print("\n‚öôÔ∏è Fichiers de configuration disponibles:")
    configs_dir = Path("configs")
    if configs_dir.exists():
        config_files = list(configs_dir.glob("*.yaml")) + list(configs_dir.glob("*.yml"))
        if config_files:
            for config in config_files:
                print(f"   üìÑ {config.name}")
        else:
            print("   ‚ö†Ô∏è Aucun fichier de configuration trouv√©")
            print("   üí° Cr√©ez un fichier de configuration ou utilisez l'exemple fourni")
    
    return True

def first_run_guide():
    """Guide de premi√®re ex√©cution"""
    print_step(4, "PREMI√àRE EX√âCUTION")
    
    print("üéØ Options pour votre premi√®re ex√©cution:")
    print("1. Mode interactif (recommand√© pour d√©buter)")
    print("2. Lister les configurations disponibles")
    print("3. Valider une configuration")
    print("4. Voir les informations syst√®me")
    print("5. Passer")
    
    choice = input("\nVotre choix (1-5): ").strip()
    
    if choice == "1":
        print("\nüéØ Lancement du mode interactif...")
        run_command("python easytpp_cli.py interactive", "Mode interactif")
        
    elif choice == "2":
        print("\nüìã Configurations disponibles:")
        run_command("python easytpp_cli.py list-configs --dir configs", "Liste des configurations")
        
    elif choice == "3":
        config_path = input("Chemin du fichier de configuration: ").strip()
        experiment = input("ID de l'exp√©rience (ex: THP): ").strip() or "THP"
        dataset = input("ID du dataset (ex: H2expc): ").strip() or "H2expc"
        
        command = f'python easytpp_cli.py validate --config "{config_path}" --experiment {experiment} --dataset {dataset}'
        run_command(command, "Validation de configuration")
        
    elif choice == "4":
        print("\nüíª Informations syst√®me:")
        run_command("python easytpp_cli.py info", "Informations syst√®me")
        
    elif choice == "5":
        print("‚úÖ Premi√®re ex√©cution ignor√©e")
    else:
        print("‚ùå Choix invalide")
        return False
    
    return True

def show_next_steps():
    """Affiche les prochaines √©tapes"""
    print_step(5, "PROCHAINES √âTAPES")
    
    print("üéâ F√©licitations! EasyTPP CLI est maintenant configur√©.")
    print("\nüìö Ressources utiles:")
    print("   üìñ CLI_PROFESSIONAL_README.md - Documentation principale")
    print("   üìñ CLI_README.md - Documentation d√©taill√©e")
    print("   üìÅ configs/ - Fichiers de configuration")
    print("   üìÅ examples/ - Scripts d'exemple")
    
    print("\nüöÄ Commandes essentielles √† retenir:")
    print("   python easytpp_cli.py --help                    # Aide g√©n√©rale")
    print("   python easytpp_cli.py interactive               # Mode interactif")
    print("   python easytpp_cli.py list-configs              # Voir les configs")
    print("   python easytpp_cli.py info                      # Infos syst√®me")
    print("   python easytpp_cli.py run --help                # Aide pour run")
    
    print("\nüéØ Exemple d'utilisation compl√®te:")
    print("   python easytpp_cli.py run \\")
    print("     --config configs/example_full_config.yaml \\")
    print("     --experiment THP \\")
    print("     --dataset H2expc \\")
    print("     --phase test")
    
    print("\nüí° Conseils:")
    print("   - Commencez par le mode interactif")
    print("   - Validez toujours vos configurations avant l'ex√©cution")
    print("   - Utilisez --verbose pour plus de d√©tails")
    print("   - Consultez la documentation pour les fonctionnalit√©s avanc√©es")

def main():
    """Fonction principale du guide"""
    print_header()
    
    print("Ce guide vous aidera √† configurer et utiliser EasyTPP CLI.")
    print("Le processus prend environ 5-10 minutes.")
    
    # V√©rifications pr√©liminaires
    if not check_python():
        print("\n‚ùå Version Python incompatible. Installez Python 3.8+")
        sys.exit(1)
    
    if not check_files():
        print("\n‚ùå Fichiers manquants. V√©rifiez l'installation.")
        sys.exit(1)
    
    print("\n‚úÖ V√©rifications pr√©liminaires r√©ussies!")
    
    # Guide √©tape par √©tape
    try:
        if not installation_guide():
            print("\n‚ùå √âchec de l'installation")
            sys.exit(1)
        
        if not basic_test():
            print("\n‚ö†Ô∏è Tests de base √©chou√©s, mais on continue...")
        
        if not configuration_guide():
            print("\n‚ùå √âchec de la configuration")
            sys.exit(1)
        
        if not first_run_guide():
            print("\n‚ö†Ô∏è Premi√®re ex√©cution √©chou√©e, mais on continue...")
        
        show_next_steps()
        
        print("\n" + "=" * 60)
        print("üéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS!")
        print("=" * 60)
        print("\nEasyTPP CLI est maintenant pr√™t √† l'emploi.")
        print("Consultez CLI_PROFESSIONAL_README.md pour plus d'informations.")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Guide interrompu par l'utilisateur.")
        print("Vous pouvez relancer ce guide √† tout moment avec: python quick_start.py")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        print("Consultez la documentation ou contactez le support.")
        sys.exit(1)

if __name__ == "__main__":
    main()
